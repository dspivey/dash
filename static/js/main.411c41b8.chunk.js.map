{"version":3,"sources":["components/charts/combined/index.js","components/charts/line/index.js","components/charts/bar/index.js","components/maps/usa/index.js","components/maps/world/index.js","components/metrics/card/index.js","components/app/navbar.js","components/app/app.js","components/app/index.js","reportWebVitals.js","index.js"],"names":["CombinedChart","props","elementId","title","useEffect","chart","am4core","am4charts","data","dateAxis","xAxes","push","renderer","grid","template","location","minGridDistance","valueAxis1","yAxes","text","valueAxis2","opposite","disabled","series1","series","dataFields","valueY","dateX","yAxis","name","tooltipText","fill","colors","getIndex","strokeWidth","clustered","columns","width","series2","lighten","toBack","series3","tensionX","bullet3","bullets","circle","radius","series4","stroke","strokeDasharray","bullet4","cursor","legend","position","scrollbarX","parent","bottomAxesContainer","Paper","elevation","style","padding","Typography","variant","color","marginBottom","id","LineChart","chartData","firstDate","Date","setDate","getDate","visits","b","i","newDate","Math","round","random","date","generateChartData","startLocation","endLocation","valueAxis","fillOpacity","range","createSeriesRange","value","endValue","contents","strokeOpacity","xAxis","tooltip","getFillFromObject","adapter","add","x","target","tooltipDataItem","background","am4themes_animated","UnitedStatesMap","am4maps","maxZoomLevel","geodata","am4geodata_usaLow","projection","AlbersUsa","zoomOut","tooltipContainer","createChild","align","valign","margin","events","on","currentSeries","hide","goHome","regionalSeries","US","show","polygonSeries","useGeodata","calculateVisualCenter","polygonTemplate","mapPolygons","createSeries","heatfield","mapImages","verticalCenter","horizontalCenter","propertyFields","latitude","longitude","nonScaling","label","heatRules","property","min","max","ev","dataItem","dataContext","markerData","type","statePolygon","getPolygonById","state","zoomToMapObject","zoomToGeoPoint","lat","long","loader","url","each","query_results","store","s","MAIL_ST_PROV_C","toNumber","LNGTD_I","LATTD_I","co_loc_n","city","mail_city_n","count","undefined","stores","visualLatitude","visualLongitude","load","am4themes_dataviz","icons","bubble","BubbleChartTwoTone","calendar","EventNoteTwoTone","ChartIcon","donut","DonutSmallTwoTone","money","MoneyIcon","receipt","ReceiptIcon","schedule","ScheduleIcon","sum","SumIcon","trendingDown","TrendingDown","trendingUp","TrendingUp","useStyles","makeStyles","theme","root","minWidth","media","height","paddingTop","avatar","cardHeaderRoot","backgroundColor","grey","opacity","spacing","cardHeaderTitle","fontSize","cardHeaderSubheader","cardContentRoot","blue","purple","red","green","skeletonRoot","borderRadius","CardMetric","classes","avatarColor","icon","loading","Icon","fallbackAvatar","className","clsx","shapeRendering","Skeleton","Card","CardHeader","subheader","CardContent","component","flexGrow","menuButton","marginRight","NavBar","AppBar","Toolbar","IconButton","edge","aria-label","App","useState","setLoading","setTimeout","CssBaseline","Container","maxWidth","Grid","container","item","md","xs","sm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","classNameGenerator","createGenerateClassName","ReactDOM","render","StrictMode","StylesProvider","generateClassName","document","getElementById"],"mappings":"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","file":"static/js/main.411c41b8.chunk.js","sourcesContent":["import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport { Typography } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React, { useEffect } from 'react';\r\n\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nexport default function CombinedChart(props) {\r\n    const {\r\n              elementId,\r\n              title\r\n          } = props;\r\n\r\n    useEffect(() => {\r\n        let chart = am4core.create(elementId, am4charts.XYChart);\r\n\r\n        // Add data\r\n        chart.data = [{\r\n            \"date\": \"2013-01-16\",\r\n            \"market1\": 71,\r\n            \"market2\": 75,\r\n            \"sales1\": 5,\r\n            \"sales2\": 8\r\n        }, {\r\n            \"date\": \"2013-01-17\",\r\n            \"market1\": 74,\r\n            \"market2\": 78,\r\n            \"sales1\": 4,\r\n            \"sales2\": 6\r\n        }, {\r\n            \"date\": \"2013-01-18\",\r\n            \"market1\": 78,\r\n            \"market2\": 88,\r\n            \"sales1\": 5,\r\n            \"sales2\": 2\r\n        }, {\r\n            \"date\": \"2013-01-19\",\r\n            \"market1\": 85,\r\n            \"market2\": 89,\r\n            \"sales1\": 8,\r\n            \"sales2\": 9\r\n        }, {\r\n            \"date\": \"2013-01-20\",\r\n            \"market1\": 82,\r\n            \"market2\": 89,\r\n            \"sales1\": 9,\r\n            \"sales2\": 6\r\n        }, {\r\n            \"date\": \"2013-01-21\",\r\n            \"market1\": 83,\r\n            \"market2\": 85,\r\n            \"sales1\": 3,\r\n            \"sales2\": 5\r\n        }, {\r\n            \"date\": \"2013-01-22\",\r\n            \"market1\": 88,\r\n            \"market2\": 92,\r\n            \"sales1\": 5,\r\n            \"sales2\": 7\r\n        }, {\r\n            \"date\": \"2013-01-23\",\r\n            \"market1\": 85,\r\n            \"market2\": 90,\r\n            \"sales1\": 7,\r\n            \"sales2\": 6\r\n        }, {\r\n            \"date\": \"2013-01-24\",\r\n            \"market1\": 85,\r\n            \"market2\": 91,\r\n            \"sales1\": 9,\r\n            \"sales2\": 5\r\n        }, {\r\n            \"date\": \"2013-01-25\",\r\n            \"market1\": 80,\r\n            \"market2\": 84,\r\n            \"sales1\": 5,\r\n            \"sales2\": 8\r\n        }, {\r\n            \"date\": \"2013-01-26\",\r\n            \"market1\": 87,\r\n            \"market2\": 92,\r\n            \"sales1\": 4,\r\n            \"sales2\": 8\r\n        }, {\r\n            \"date\": \"2013-01-27\",\r\n            \"market1\": 84,\r\n            \"market2\": 87,\r\n            \"sales1\": 3,\r\n            \"sales2\": 4\r\n        }, {\r\n            \"date\": \"2013-01-28\",\r\n            \"market1\": 83,\r\n            \"market2\": 88,\r\n            \"sales1\": 5,\r\n            \"sales2\": 7\r\n        }, {\r\n            \"date\": \"2013-01-29\",\r\n            \"market1\": 84,\r\n            \"market2\": 87,\r\n            \"sales1\": 5,\r\n            \"sales2\": 8\r\n        }, {\r\n            \"date\": \"2013-01-30\",\r\n            \"market1\": 81,\r\n            \"market2\": 85,\r\n            \"sales1\": 4,\r\n            \"sales2\": 7\r\n        }];\r\n\r\n        // Create axes\r\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n        dateAxis.renderer.grid.template.location = 0;\r\n        dateAxis.renderer.minGridDistance = 30;\r\n\r\n        let valueAxis1 = chart.yAxes.push(new am4charts.ValueAxis());\r\n        valueAxis1.title.text = \"Sales\";\r\n\r\n        let valueAxis2 = chart.yAxes.push(new am4charts.ValueAxis());\r\n        valueAxis2.title.text = \"Market Days\";\r\n        valueAxis2.renderer.opposite = true;\r\n        valueAxis2.renderer.grid.template.disabled = true;\r\n\r\n        // Create series\r\n        let series1 = chart.series.push(new am4charts.ColumnSeries());\r\n        series1.dataFields.valueY = \"sales1\";\r\n        series1.dataFields.dateX = \"date\";\r\n        series1.yAxis = valueAxis1;\r\n        series1.name = \"Target Sales\";\r\n        series1.tooltipText = \"{name}\\n[bold font-size: 20]${valueY}M[/]\";\r\n        series1.fill = chart.colors.getIndex(0);\r\n        series1.strokeWidth = 0;\r\n        series1.clustered = false;\r\n        series1.columns.template.width = am4core.percent(40);\r\n\r\n        let series2 = chart.series.push(new am4charts.ColumnSeries());\r\n        series2.dataFields.valueY = \"sales2\";\r\n        series2.dataFields.dateX = \"date\";\r\n        series2.yAxis = valueAxis1;\r\n        series2.name = \"Actual Sales\";\r\n        series2.tooltipText = \"{name}\\n[bold font-size: 20]${valueY}M[/]\";\r\n        series2.fill = chart.colors.getIndex(0).lighten(0.5);\r\n        series2.strokeWidth = 0;\r\n        series2.clustered = false;\r\n        series2.toBack();\r\n\r\n        let series3 = chart.series.push(new am4charts.LineSeries());\r\n        series3.dataFields.valueY = \"market1\";\r\n        series3.dataFields.dateX = \"date\";\r\n        series3.name = \"Market Days\";\r\n        series3.strokeWidth = 2;\r\n        series3.tensionX = 0.7;\r\n        series3.yAxis = valueAxis2;\r\n        series3.tooltipText = \"{name}\\n[bold font-size: 20]{valueY}[/]\";\r\n\r\n        let bullet3 = series3.bullets.push(new am4charts.CircleBullet());\r\n        bullet3.circle.radius = 3;\r\n        bullet3.circle.strokeWidth = 2;\r\n        bullet3.circle.fill = am4core.color(\"#fff\");\r\n\r\n        let series4 = chart.series.push(new am4charts.LineSeries());\r\n        series4.dataFields.valueY = \"market2\";\r\n        series4.dataFields.dateX = \"date\";\r\n        series4.name = \"Market Days ALL\";\r\n        series4.strokeWidth = 2;\r\n        series4.tensionX = 0.7;\r\n        series4.yAxis = valueAxis2;\r\n        series4.tooltipText = \"{name}\\n[bold font-size: 20]{valueY}[/]\";\r\n        series4.stroke = chart.colors.getIndex(0).lighten(0.5);\r\n        series4.strokeDasharray = \"3,3\";\r\n\r\n        let bullet4 = series4.bullets.push(new am4charts.CircleBullet());\r\n        bullet4.circle.radius = 3;\r\n        bullet4.circle.strokeWidth = 2;\r\n        bullet4.circle.fill = am4core.color(\"#fff\");\r\n\r\n        // Add cursor\r\n        chart.cursor = new am4charts.XYCursor();\r\n\r\n        // Add legend\r\n        chart.legend = new am4charts.Legend();\r\n        chart.legend.position = \"top\";\r\n\r\n        // Add scrollbar\r\n        chart.scrollbarX = new am4charts.XYChartScrollbar();\r\n        chart.scrollbarX.series.push(series1);\r\n        chart.scrollbarX.series.push(series3);\r\n        chart.scrollbarX.parent = chart.bottomAxesContainer;\r\n\r\n    }, [elementId]);\r\n\r\n    return (\r\n        <Paper elevation={3} style={{ padding: 24 }}>\r\n            <Typography variant=\"h4\" color=\"textSecondary\" style={{ marginBottom: 16 }}>\r\n                {title}\r\n            </Typography>\r\n            <div id={elementId} style={{ 'height': 500 }}></div>\r\n        </Paper>\r\n    );\r\n}","import * as am4charts from '@amcharts/amcharts4/charts';\r\nimport * as am4core from '@amcharts/amcharts4/core';\r\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\r\nimport { Typography } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React, { useEffect } from 'react';\r\n\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nexport default function LineChart(props) {\r\n    const {\r\n              elementId,\r\n              title\r\n          } = props;\r\n\r\n    useEffect(() => {\r\n        let chart = am4core.create(elementId, am4charts.XYChart);\r\n\r\n        // Add data\r\n        chart.data = generateChartData();\r\n\r\n        function generateChartData() {\r\n            let chartData = [];\r\n            let firstDate = new Date();\r\n            firstDate.setDate(firstDate.getDate() - 150);\r\n\r\n            let visits = -40;\r\n            let b = 0.6;\r\n\r\n            for (let i = 0; i < 150; i++) {\r\n                // we create date objects here. In your data, you can have date strings\r\n                // and then set format of your dates using chart.dataDateFormat property,\r\n                // however when possible, use date objects, as this will speed up chart rendering.\r\n                let newDate = new Date(firstDate);\r\n                newDate.setDate(newDate.getDate() + i);\r\n                if (i > 80) {\r\n                    b = 0.4;\r\n                }\r\n                visits +=\r\n                    Math.round((\r\n                                   Math.random() < b ? 1 : -1\r\n                               ) * Math.random() * 10);\r\n\r\n                chartData.push({\r\n                    date: newDate,\r\n                    visits: visits\r\n                });\r\n            }\r\n\r\n            return chartData;\r\n        }\r\n\r\n        // Create axes\r\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n        dateAxis.startLocation = 0.5;\r\n        dateAxis.endLocation = 0.5;\r\n\r\n        // Create value axis\r\n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n\r\n        // Create series\r\n        let series = chart.series.push(new am4charts.LineSeries());\r\n        series.dataFields.valueY = 'visits';\r\n        series.dataFields.dateX = 'date';\r\n        series.strokeWidth = 3;\r\n        series.tooltipText = '{valueY.value}';\r\n        series.fillOpacity = 0.1;\r\n        series.tensionX = 0.75;\r\n\r\n        // Create a range to change stroke for values below 0\r\n        let range = valueAxis.createSeriesRange(series);\r\n        range.value = 0;\r\n        range.endValue = -1000;\r\n        range.contents.stroke = chart.colors.getIndex(4);\r\n        range.contents.fill = range.contents.stroke;\r\n        range.contents.strokeOpacity = 0.7;\r\n        range.contents.fillOpacity = 0.1;\r\n\r\n        // Add cursor\r\n        chart.cursor = new am4charts.XYCursor();\r\n        chart.cursor.xAxis = dateAxis;\r\n        chart.scrollbarX = new am4core.Scrollbar();\r\n\r\n        series.tooltip.getFillFromObject = false;\r\n        series.tooltip.adapter.add('x', (x, target) => {\r\n            if (series.tooltip.tooltipDataItem.valueY < 0) {\r\n                series.tooltip.background.fill = chart.colors.getIndex(4);\r\n            } else {\r\n                series.tooltip.background.fill = chart.colors.getIndex(0);\r\n            }\r\n            return x;\r\n        });\r\n    }, [elementId]);\r\n\r\n    return (\r\n        <Paper elevation={3} style={{ padding: 24 }}>\r\n            <Typography variant=\"h4\" color=\"textSecondary\" style={{ marginBottom: 16 }}>\r\n                {title}\r\n            </Typography>\r\n            <div id={elementId} style={{ 'height': 500 }}></div>\r\n        </Paper>\r\n    );\r\n}","import * as am4charts from '@amcharts/amcharts4/charts';\r\nimport * as am4core from '@amcharts/amcharts4/core';\r\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\r\nimport { Typography } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React, { useEffect } from 'react';\r\n\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nexport default function BarChart(props) {\r\n    const {\r\n              elementId,\r\n              title\r\n          } = props;\r\n\r\n    useEffect(() => {\r\n        let chart = am4core.create(elementId, am4charts.XYChart);\r\n        chart.hiddenState.properties.opacity = 0; // this creates initial fade-in\r\n\r\n        chart.data = [\r\n            {\r\n                country: 'USA',\r\n                visits: 23725\r\n            },\r\n            {\r\n                country: 'China',\r\n                visits: 1882\r\n            },\r\n            {\r\n                country: 'Japan',\r\n                visits: 1809\r\n            },\r\n            {\r\n                country: 'Germany',\r\n                visits: 1322\r\n            },\r\n            {\r\n                country: 'UK',\r\n                visits: 1122\r\n            },\r\n            {\r\n                country: 'France',\r\n                visits: 1114\r\n            },\r\n            {\r\n                country: 'India',\r\n                visits: 984\r\n            },\r\n            {\r\n                country: 'Spain',\r\n                visits: 711\r\n            },\r\n            {\r\n                country: 'Netherlands',\r\n                visits: 665\r\n            },\r\n            {\r\n                country: 'Russia',\r\n                visits: 580\r\n            },\r\n            {\r\n                country: 'South Korea',\r\n                visits: 443\r\n            },\r\n            {\r\n                country: 'Canada',\r\n                visits: 441\r\n            }\r\n        ];\r\n\r\n        let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n        categoryAxis.renderer.grid.template.location = 0;\r\n        categoryAxis.dataFields.category = 'country';\r\n        categoryAxis.renderer.minGridDistance = 40;\r\n        categoryAxis.fontSize = 11;\r\n\r\n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n        valueAxis.min = 0;\r\n        valueAxis.max = 24000;\r\n        valueAxis.strictMinMax = true;\r\n        valueAxis.renderer.minGridDistance = 30;\r\n        // axis break\r\n        let axisBreak = valueAxis.axisBreaks.create();\r\n        axisBreak.startValue = 2100;\r\n        axisBreak.endValue = 22900;\r\n        //axisBreak.breakSize = 0.005;\r\n\r\n        // fixed axis break\r\n        let d = (\r\n                    axisBreak.endValue - axisBreak.startValue\r\n                ) / (\r\n                    valueAxis.max - valueAxis.min\r\n                );\r\n        axisBreak.breakSize =\r\n            0.05 * (\r\n                     1 - d\r\n                 ) / d; // 0.05 means that the break will take 5% of the total value axis height\r\n\r\n        // make break expand on hover\r\n        let hoverState = axisBreak.states.create('hover');\r\n        hoverState.properties.breakSize = 1;\r\n        hoverState.properties.opacity = 0.1;\r\n        hoverState.transitionDuration = 1500;\r\n\r\n        axisBreak.defaultState.transitionDuration = 1000;\r\n        /*\r\n         // this is exactly the same, but with events\r\n         axisBreak.events.on(\"over\", function() {\r\n         axisBreak.animate(\r\n         [{ property: \"breakSize\", to: 1 }, { property: \"opacity\", to: 0.1 }],\r\n         1500,\r\n         am4core.ease.sinOut\r\n         );\r\n         });\r\n         axisBreak.events.on(\"out\", function() {\r\n         axisBreak.animate(\r\n         [{ property: \"breakSize\", to: 0.005 }, { property: \"opacity\", to: 1 }],\r\n         1000,\r\n         am4core.ease.quadOut\r\n         );\r\n         });*/\r\n\r\n        let series = chart.series.push(new am4charts.ColumnSeries());\r\n        series.dataFields.categoryX = 'country';\r\n        series.dataFields.valueY = 'visits';\r\n        series.columns.template.tooltipText = '{valueY.value}';\r\n        series.columns.template.tooltipY = 0;\r\n        series.columns.template.strokeOpacity = 0;\r\n\r\n        // as by default columns of the same series are of the same color, we add adapter which takes colors from\r\n        // chart.colors color set\r\n        series.columns.template.adapter.add('fill', function (fill, target) {\r\n            return chart.colors.getIndex(target.dataItem.index);\r\n        });\r\n    }, [elementId]);\r\n\r\n    // const { loading } = props;\r\n    // if (loading) {\r\n    //     return <Skeleton variant=\"rect\" height={500}></Skeleton>;\r\n    // }\r\n\r\n    return (\r\n        <Paper elevation={3} style={{ padding: 24 }}>\r\n            <Typography variant=\"h4\" color=\"textSecondary\" style={{ marginBottom: 16 }}>\r\n                {title}\r\n            </Typography>\r\n            <div id={elementId} style={{ 'height': 500 }}></div>\r\n        </Paper>\r\n    );\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nimport am4themes_dataviz from \"@amcharts/amcharts4/themes/dataviz\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport { Typography } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React, { useEffect } from 'react';\r\n\r\n\r\nam4core.useTheme(am4themes_dataviz);\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nexport default function UnitedStatesMap(props) {\r\n    const {\r\n              elementId,\r\n              title\r\n          } = props;\r\n\r\n    useEffect(() => {\r\n        // Create map instance\r\n        let chart = am4core.create(elementId, am4maps.MapChart);\r\n        chart.maxZoomLevel = 64;\r\n\r\n        // Set map definition\r\n        chart.geodata = am4geodata_usaLow;\r\n\r\n        // Set projection\r\n        chart.projection = new am4maps.projections.AlbersUsa();\r\n\r\n        // Add button\r\n        let zoomOut = chart.tooltipContainer.createChild(am4core.ZoomOutButton);\r\n        zoomOut.align = \"right\";\r\n        zoomOut.valign = \"top\";\r\n        zoomOut.margin(20, 20, 20, 20);\r\n        zoomOut.events.on(\"hit\", function() {\r\n            if (currentSeries) {\r\n                currentSeries.hide();\r\n            }\r\n            chart.goHome();\r\n            zoomOut.hide();\r\n            currentSeries = regionalSeries.US.series;\r\n            currentSeries.show();\r\n        });\r\n        zoomOut.hide();\r\n\r\n\r\n        // Create map polygon series\r\n        let polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n        polygonSeries.useGeodata = true;\r\n        polygonSeries.calculateVisualCenter = true;\r\n\r\n        // Configure series\r\n        let polygonTemplate = polygonSeries.mapPolygons.template;\r\n        polygonTemplate.tooltipText = \"{name}\";\r\n        polygonTemplate.fill = chart.colors.getIndex(0);\r\n\r\n        // Load data when map polygons are ready\r\n        chart.events.on(\"ready\", loadStores);\r\n\r\n        // Loads store data\r\n        function loadStores() {\r\n            let loader = new am4core.DataSource();\r\n            loader.url = \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/t-160/TargetStores.json\";\r\n            loader.events.on(\"parseended\", function(ev) {\r\n                setupStores(ev.target.data);\r\n            });\r\n            loader.load();\r\n        }\r\n\r\n        // Creates a series\r\n        function createSeries(heatfield) {\r\n            let series = chart.series.push(new am4maps.MapImageSeries());\r\n            series.dataFields.value = heatfield;\r\n\r\n            let template = series.mapImages.template;\r\n            template.verticalCenter = \"middle\";\r\n            template.horizontalCenter = \"middle\";\r\n            template.propertyFields.latitude = \"lat\";\r\n            template.propertyFields.longitude = \"long\";\r\n            template.tooltipText = \"{name}:\\n[bold]{stores} stores[/]\";\r\n\r\n            let circle = template.createChild(am4core.Circle);\r\n            circle.radius = 10;\r\n            circle.fillOpacity = 0.7;\r\n            circle.verticalCenter = \"middle\";\r\n            circle.horizontalCenter = \"middle\";\r\n            circle.nonScaling = true;\r\n\r\n            let label = template.createChild(am4core.Label);\r\n            label.text = \"{stores}\";\r\n            label.fill = am4core.color(\"#fff\");\r\n            label.verticalCenter = \"middle\";\r\n            label.horizontalCenter = \"middle\";\r\n            label.nonScaling = true;\r\n\r\n            let heat = series.heatRules.push({\r\n                target: circle,\r\n                property: \"radius\",\r\n                min: 10,\r\n                max: 30\r\n            });\r\n\r\n            // Set up drill-down\r\n            series.mapImages.template.events.on(\"hit\", function(ev) {\r\n\r\n                // Determine what we've clicked on\r\n                let data = ev.target.dataItem.dataContext;\r\n\r\n                // No id? Individual store - nothing to drill down to further\r\n                if (!data.target) {\r\n                    return;\r\n                }\r\n\r\n                // Create actual series if it hasn't been yet created\r\n                if (!regionalSeries[data.target].series) {\r\n                    regionalSeries[data.target].series = createSeries(\"count\");\r\n                    regionalSeries[data.target].series.data = data.markerData;\r\n                }\r\n\r\n                // Hide current series\r\n                if (currentSeries) {\r\n                    currentSeries.hide();\r\n                }\r\n\r\n                // Control zoom\r\n                if (data.type == \"state\") {\r\n                    let statePolygon = polygonSeries.getPolygonById(\"US-\" + data.state);\r\n                    chart.zoomToMapObject(statePolygon);\r\n                }\r\n                else if (data.type == \"city\") {\r\n                    chart.zoomToGeoPoint({\r\n                        latitude: data.lat,\r\n                        longitude: data.long\r\n                    }, 64, true);\r\n                }\r\n                zoomOut.show();\r\n\r\n                // Show new targert series\r\n                currentSeries = regionalSeries[data.target].series;\r\n                currentSeries.show();\r\n            });\r\n\r\n            return series;\r\n        }\r\n\r\n        let regionalSeries = {};\r\n        let currentSeries;\r\n\r\n        function setupStores(data) {\r\n\r\n            // Init country-level series\r\n            regionalSeries.US = {\r\n                markerData: [],\r\n                series: createSeries(\"stores\")\r\n            };\r\n\r\n            // Set current series\r\n            currentSeries = regionalSeries.US.series;\r\n\r\n            // Process data\r\n            am4core.array.each(data.query_results, function(store) {\r\n\r\n                // Get store data\r\n                let s = {\r\n                    state: store.MAIL_ST_PROV_C,\r\n                    long: am4core.type.toNumber(store.LNGTD_I),\r\n                    lat: am4core.type.toNumber(store.LATTD_I),\r\n                    location: store.co_loc_n,\r\n                    city: store.mail_city_n,\r\n                    count: am4core.type.toNumber(store.count)\r\n                };\r\n\r\n                // Process state-level data\r\n                if (regionalSeries[s.state] == undefined) {\r\n                    let statePolygon = polygonSeries.getPolygonById(\"US-\" + s.state);\r\n                    if (statePolygon) {\r\n\r\n                        // Add state data\r\n                        regionalSeries[s.state] = {\r\n                            target: s.state,\r\n                            type: \"state\",\r\n                            name: statePolygon.dataItem.dataContext.name,\r\n                            count: s.count,\r\n                            stores: 1,\r\n                            lat: statePolygon.visualLatitude,\r\n                            long: statePolygon.visualLongitude,\r\n                            state: s.state,\r\n                            markerData: []\r\n                        };\r\n                        regionalSeries.US.markerData.push(regionalSeries[s.state]);\r\n\r\n                    }\r\n                    else {\r\n                        // State not found\r\n                        return;\r\n                    }\r\n                }\r\n                else {\r\n                    regionalSeries[s.state].stores++;\r\n                    regionalSeries[s.state].count += s.count;\r\n                }\r\n\r\n                // Process city-level data\r\n                if (regionalSeries[s.city] == undefined) {\r\n                    regionalSeries[s.city] = {\r\n                        target: s.city,\r\n                        type: \"city\",\r\n                        name: s.city,\r\n                        count: s.count,\r\n                        stores: 1,\r\n                        lat: s.lat,\r\n                        long: s.long,\r\n                        state: s.state,\r\n                        markerData: []\r\n                    };\r\n                    regionalSeries[s.state].markerData.push(regionalSeries[s.city]);\r\n                }\r\n                else {\r\n                    regionalSeries[s.city].stores++;\r\n                    regionalSeries[s.city].count += store.count;\r\n                }\r\n\r\n                // Process individual store\r\n                regionalSeries[s.city].markerData.push({\r\n                    name: s.location,\r\n                    count: s.count,\r\n                    stores: 1,\r\n                    lat: s.lat,\r\n                    long: s.long,\r\n                    state: s.state\r\n                });\r\n\r\n            });\r\n\r\n            regionalSeries.US.series.data = regionalSeries.US.markerData;\r\n        }\r\n    }, [elementId]);\r\n\r\n    return (\r\n        <Paper elevation={3} style={{ padding: 24 }}>\r\n            <Typography variant=\"h4\" color=\"textSecondary\" style={{ marginBottom: 16 }}>\r\n                {title}\r\n            </Typography>\r\n            <div id={elementId} style={{ 'height': 500 }}></div>\r\n        </Paper>\r\n    );\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport am4geodata_data_countries2 from \"@amcharts/amcharts4-geodata/data/countries2\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport { Typography } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React, { useEffect } from 'react';\r\n\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nexport default function WorldMap(props) {\r\n    const {\r\n              elementId,\r\n              title\r\n          } = props;\r\n\r\n    useEffect(() => {\r\n        let continents = {\r\n            \"AF\": 0,\r\n            \"AN\": 1,\r\n            \"AS\": 2,\r\n            \"EU\": 3,\r\n            \"NA\": 4,\r\n            \"OC\": 5,\r\n            \"SA\": 6\r\n        }\r\n\r\n        // Create map instance\r\n        let chart = am4core.create(elementId, am4maps.MapChart);\r\n        chart.projection = new am4maps.projections.Miller();\r\n\r\n        // Create map polygon series for world map\r\n        let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n        worldSeries.useGeodata = true;\r\n        worldSeries.geodata = am4geodata_worldLow;\r\n        worldSeries.exclude = [\"AQ\"];\r\n\r\n        let worldPolygon = worldSeries.mapPolygons.template;\r\n        worldPolygon.tooltipText = \"{name}\";\r\n        worldPolygon.nonScalingStroke = true;\r\n        worldPolygon.strokeOpacity = 0.5;\r\n        worldPolygon.fill = am4core.color(\"#eee\");\r\n        worldPolygon.propertyFields.fill = \"color\";\r\n\r\n        let hs = worldPolygon.states.create(\"hover\");\r\n        hs.properties.fill = chart.colors.getIndex(9);\r\n\r\n\r\n        // Create country specific series (but hide it for now)\r\n        let countrySeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n        countrySeries.useGeodata = true;\r\n        countrySeries.hide();\r\n        countrySeries.geodataSource.events.on(\"done\", function(ev) {\r\n            worldSeries.hide();\r\n            countrySeries.show();\r\n        });\r\n\r\n        let countryPolygon = countrySeries.mapPolygons.template;\r\n        countryPolygon.tooltipText = \"{name}\";\r\n        countryPolygon.nonScalingStroke = true;\r\n        countryPolygon.strokeOpacity = 0.5;\r\n        countryPolygon.fill = am4core.color(\"#eee\");\r\n\r\n        let chs = countryPolygon.states.create(\"hover\");\r\n        chs.properties.fill = chart.colors.getIndex(9);\r\n\r\n        // Set up click events\r\n        worldPolygon.events.on(\"hit\", function(ev) {\r\n            ev.target.series.chart.zoomToMapObject(ev.target);\r\n            let map = ev.target.dataItem.dataContext.map;\r\n            if (map) {\r\n                ev.target.isHover = false;\r\n                countrySeries.geodataSource.url = \"https://www.amcharts.com/lib/4/geodata/json/\" + map + \".json\";\r\n                countrySeries.geodataSource.load();\r\n            }\r\n        });\r\n\r\n        // Set up data for countries\r\n        let data = [];\r\n        for(var id in am4geodata_data_countries2) {\r\n            if (am4geodata_data_countries2.hasOwnProperty(id)) {\r\n                let country = am4geodata_data_countries2[id];\r\n                if (country.maps.length) {\r\n                    data.push({\r\n                        id: id,\r\n                        color: chart.colors.getIndex(continents[country.continent_code]),\r\n                        map: country.maps[0]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        worldSeries.data = data;\r\n\r\n        // Zoom control\r\n        chart.zoomControl = new am4maps.ZoomControl();\r\n\r\n        let homeButton = new am4core.Button();\r\n        homeButton.events.on(\"hit\", function() {\r\n            worldSeries.show();\r\n            countrySeries.hide();\r\n            chart.goHome();\r\n        });\r\n\r\n        homeButton.icon = new am4core.Sprite();\r\n        homeButton.padding(7, 5, 7, 5);\r\n        homeButton.width = 30;\r\n        homeButton.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\r\n        homeButton.marginBottom = 10;\r\n        homeButton.parent = chart.zoomControl;\r\n        homeButton.insertBefore(chart.zoomControl.plusButton);\r\n    }, [elementId]);\r\n\r\n    return (\r\n        <Paper elevation={3} style={{ padding: 24 }}>\r\n            <Typography variant=\"h4\" color=\"textSecondary\" style={{ marginBottom: 16 }}>\r\n                {title}\r\n            </Typography>\r\n            <div id={elementId} style={{ 'height': 500 }}></div>\r\n        </Paper>\r\n    );\r\n}","import { Card, CardContent, CardHeader, Typography, } from '@material-ui/core';\r\nimport { blue, green, grey, purple, red } from '@material-ui/core/colors';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    BubbleChartTwoTone,\r\n    DonutSmallTwoTone,\r\n    EventNoteTwoTone,\r\n    Functions as SumIcon,\r\n    MonetizationOnRounded as MoneyIcon,\r\n    PollRounded as ChartIcon,\r\n    Receipt as ReceiptIcon,\r\n    ScheduleRounded as ScheduleIcon,\r\n    TrendingDown,\r\n    TrendingUp\r\n} from '@material-ui/icons';\r\nimport { Skeleton } from '@material-ui/lab';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n\r\nconst icons = {\r\n    bubble:       BubbleChartTwoTone,\r\n    calendar:     EventNoteTwoTone,\r\n    chart:        ChartIcon,\r\n    donut:        DonutSmallTwoTone,\r\n    money:        MoneyIcon,\r\n    receipt:      ReceiptIcon,\r\n    schedule:     ScheduleIcon,\r\n    sum:          SumIcon,\r\n    trendingDown: TrendingDown,\r\n    trendingUp:   TrendingUp,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => (\r\n    {\r\n        root:                {\r\n            minWidth: 350,\r\n        },\r\n        media:               {\r\n            height:     0,\r\n            paddingTop: '56.25%', // 16:9\r\n        },\r\n        avatar:              {},\r\n        cardHeaderRoot:      {\r\n            backgroundColor: grey[900],\r\n            opacity:         0.9,\r\n            padding: theme.spacing(1, 2),\r\n        },\r\n        cardHeaderTitle:     {\r\n            fontSize: '2em',\r\n            color:    'white',\r\n        },\r\n        cardHeaderSubheader: {\r\n            color: 'white',\r\n        },\r\n        cardContentRoot:     {\r\n            padding: theme.spacing(3, 2),\r\n        },\r\n        blue:                {\r\n            color: blue[500],\r\n        },\r\n        purple:              {\r\n            color: purple[500],\r\n        },\r\n        red:                 {\r\n            color: red[800],\r\n        },\r\n        green:               {\r\n            color: green[800],\r\n        },\r\n        skeletonRoot:        {\r\n            borderRadius: 4,\r\n            minWidth:     350,\r\n        }\r\n    }\r\n));\r\n\r\n// TODO: Update MetricCard to be more customizable via props\r\n// TODO: Add more visual distinction for metrics cards\r\n// TODO: Move icon map to a util or other package so we don't need to use strings to select (same with colors?)\r\nexport default function CardMetric(props) {\r\n    const classes = useStyles();\r\n\r\n    const {\r\n              avatar,\r\n              avatarColor = 'blue',\r\n              icon        = 'trendingUp',\r\n              loading     = false,\r\n              title,\r\n              value,\r\n          } = props;\r\n\r\n    const Icon = icons[icon];\r\n\r\n    const fallbackAvatar = (\r\n        <Icon\r\n            className={clsx(classes[avatarColor])}\r\n            shapeRendering=\"crispEdges\"\r\n            style={{\r\n                fontSize: 48\r\n            }}\r\n        />\r\n    );\r\n\r\n    if (loading) {\r\n        return <Skeleton\r\n            className={classes.skeletonRoot}\r\n            variant=\"rect\"\r\n            width=\"100%\"\r\n            height={175}\r\n        />;\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            classes={{\r\n                root: classes.root,\r\n            }}\r\n        >\r\n            <CardHeader\r\n                classes={{\r\n                    root:      classes.cardHeaderRoot,\r\n                    title:     classes.cardHeaderTitle,\r\n                    subheader: classes.cardHeaderSubheader,\r\n                }}\r\n                avatar={avatar || fallbackAvatar}\r\n                // subheader=\"Some other detail\"\r\n                title={title}\r\n            />\r\n            <CardContent\r\n                classes={{\r\n                    root: classes.cardContentRoot,\r\n                }}>\r\n                <Typography\r\n                    variant=\"h3\"\r\n                    color=\"textSecondary\"\r\n                    component=\"p\"\r\n                >\r\n                    {value}\r\n                </Typography>\r\n            </CardContent>\r\n            {/*<CardActions style={{ justifyContent: \"flex-end\" }}>\r\n             <Button size=\"small\" color=\"secondary\" variant=\"outlined\">\r\n             Learn More\r\n             </Button>\r\n             </CardActions>*/}\r\n        </Card>\r\n    );\r\n}\r\n\r\nCardMetric.propTypes = {\r\n    avatar:      PropTypes.node,\r\n    avatarColor: PropTypes.oneOf(['blue', 'green', 'purple', 'red']),\r\n    icon:        PropTypes.oneOf(Object.keys(icons)),\r\n    loading:     PropTypes.bool,\r\n    title:       PropTypes.string.isRequired,\r\n    value:       PropTypes.string.isRequired,\r\n};","import { AppBar, IconButton, Toolbar, Typography, } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport React from 'react';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => (\r\n    {\r\n        root: {\r\n            flexGrow: 1,\r\n            marginBottom: theme.spacing(3),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }\r\n));\r\n\r\n// TODO: Add logo to navbar\r\n// TODO: Add links / menus as needed to menubar (or remove hamburger menu)\r\nexport default function NavBar(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar color=\"default\" position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Data Vulcans\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import { Container, CssBaseline, Grid, } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { CombinedChart } from '../charts';\nimport { LineChart } from '../charts';\nimport { UnitedStatesMap } from '../maps';\nimport { CardMetric } from '../metrics';\n\n// import logo from './logo.svg';\nimport './app.css';\nimport NavBar from './navbar';\n\n\n// TODO: Move app wide state to an AppContext (e.g. loading, status alerts)\n// TODO: Add skeleton for viz components\n// TODO: Add `collapses` around viz components and/or `rows`\n// TODO: Change viz component surface to a card instead of paper?\nfunction App() {\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setLoading(false);\n        }, 1500);\n    }, [setLoading]);\n\n    return (\n        <div>\n            <CssBaseline />\n            <NavBar />\n            <Container maxWidth=\"xl\">\n                <Grid\n                    container\n                    spacing={3}\n                    style={{ marginBottom: 24 }}\n                >\n                    <Grid item md={3} xs={6}>\n                        <CardMetric\n                            avatarColor=\"green\"\n                            icon=\"money\"\n                            title=\"Total Charges\"\n                            value=\"$1,932,438,031\"\n                            loading={loading}\n                        />\n                    </Grid>\n                    <Grid item md={3} xs={6}>\n                        <CardMetric\n                            avatarColor=\"red\"\n                            icon=\"receipt\"\n                            title=\"Total Payments\"\n                            value=\"$984,823,207\"\n                            loading={loading}\n                        />\n                    </Grid>\n                    <Grid item md={3} xs={6}>\n                        <CardMetric\n                            avatarColor=\"purple\"\n                            icon=\"chart\"\n                            title=\"Average Charges\"\n                            value=\"$780,404\"\n                            loading={loading}\n                        />\n                    </Grid>\n                    <Grid item md={3} xs={6}>\n                        <CardMetric\n                            avatarColor=\"blue\"\n                            icon=\"sum\"\n                            title=\"Average Charge by Visit\"\n                            value=\"$99\"\n                            loading={loading}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid container spacing={3} style={{ marginBottom: 24 }}>\n                    <Grid item md={6} sm={12}>\n                        <LineChart\n                            elementId=\"linechart\"\n                            loading={loading}\n                            title=\"Charges by Year\"\n                        />\n                    </Grid>\n                    <Grid item md={6} sm={12}>\n                        <CombinedChart\n                            elementId=\"combined\"\n                            loading={loading}\n                            title=\"Wall Road\"\n                        />\n                    </Grid>\n                </Grid>\n                <Grid container spacing={3} style={{ marginBottom: 24 }}>\n                    <Grid item xs={12}>\n                        <UnitedStatesMap\n                            elementId=\"usmap\"\n                            loading={loading}\n                            title=\"'Merica\"\n                        />\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import App from './app';\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGenerateClassName, StylesProvider } from '@material-ui/core/styles';\nimport 'fontsource-roboto';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n// We need to create a single class name generator and then pass that into a StyleProvider\n// component that is wrapping our main App component. This will ensure that all style names\n// generated for production builds have consistently incremented names so there are no duplicated\n// CSS/JSS class names.\n// https://material-ui.com/getting-started/faq/#why-arent-my-components-rendering-correctly-in-production-builds\nconst classNameGenerator = createGenerateClassName();\n\nReactDOM.render(\n    <React.StrictMode>\n        <StylesProvider generateClassName={classNameGenerator}>\n            <App />\n        </StylesProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}